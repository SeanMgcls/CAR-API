package com.magcalas.car;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Controller // This means that this class is a Controller
@RequestMapping(path="/magcalas") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private CarRepository CarRepository;
    @Autowired
    private CarRepository carRepository;

    //    URI: <yoursurname>/all
    //    METHOD: GET
    //    PARAMETERS: none
    //    Action: Retrive all cars
    //    Response: Cars list (json)

    @GetMapping(path="/all")
    public @ResponseBody Iterable<Car> getAllUsers() {
        // This returns a JSON or XML with the users
        return CarRepository.findAll();
    }

    @PostMapping(path="/new") // Map ONLY POST Requests
    public @ResponseBody String addNewCar (
            @RequestParam String brand,
            @RequestParam String model,
            @RequestParam String body,
            @RequestParam String price) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Car n = new Car();
        n.setBrand(brand);
        n.setModel(model);
        n.setBody(body);
        n.setPrice(price);
        CarRepository.save(n);
        return "Saved";
    }
    @PutMapping(path = "/{id}")
    public @ResponseBody String editCar(
            @PathVariable int id,
            @RequestParam String brand,
            @RequestParam String model,
            @RequestParam String body,
            @RequestParam String price) {

        Optional<Car> optionalCar = CarRepository.findById(id);
        if (optionalCar.isEmpty()) {
            return "Car not found";
        }

        Car n = optionalCar.get();
        n.setBrand(brand);
        n.setModel(model);
        n.setBody(body);
        n.setPrice(price);
        CarRepository.save(n);

        return "Success editing car";
    }


    @DeleteMapping(path="/{id}")
    public @ResponseBody String deleteCar(@RequestParam Integer id) {

        if (CarRepository.existsById(id)) {
            CarRepository.deleteById(id);
            return "DELETED";
        } else {

            return "Car with ID " + id + " not found";
        }
    }

    @GetMapping(path = "/id/{id}")
    public @ResponseBody Object searchCar(@RequestParam Integer id) {

        if (CarRepository.existsById(id)) {
            return CarRepository.findById(id);
        } else {
            return "Car with ID not found";
        }
    }


    @GetMapping(path = "/search")
    public @ResponseBody List<Car> search(@RequestParam String key) {
        Iterable<Car> cars = CarRepository.findAll();
        List<Car> result = new ArrayList<>();

        for (Car car : cars) {
            if (car.getBrand().equalsIgnoreCase(key) ||
                    car.getModel().equalsIgnoreCase(key) ||
                    car.getBody().equalsIgnoreCase(key) ||
                    car.getPrice().equals(key)) { // Convert price to String for comparison
                result.add(car);
            }
        }
        if (!result.isEmpty()) {
            return result;
        }
        else {
            return null;
        }
    }




}